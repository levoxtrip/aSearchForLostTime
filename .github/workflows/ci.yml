name: ci
on:
  push:
    branches:
      - master
      - main
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      
      - uses: actions/cache@v3
        with:
          key: ${{ github.ref }}
          path: .cache
      
      - name: Install dependencies
        run: |
          echo "Installing MkDocs Material and dependencies..."
          pip install --upgrade pip
          pip install mkdocs-material
          pip install "mkdocs-material[imaging]"
          echo ""
          echo "Installed packages:"
          pip list | grep -E "(mkdocs|material|pillow|cairosvg)"
      
      - name: Debug - Check directory structure
        run: |
          echo "=== Repository Structure ==="
          ls -la
          echo ""
          echo "=== docs/ folder ==="
          ls -la docs/
          echo ""
          echo "=== docs/blog/ folder ==="
          ls -la docs/blog/
          echo ""
          echo "=== docs/blog/posts/ folder ==="
          ls -la docs/blog/posts/ || echo "No posts yet"
          echo ""
          echo "=== docs/stylesheets/ folder ==="
          ls -la docs/stylesheets/
          echo ""
          echo "=== Checking mkdocs.yml ==="
          head -20 mkdocs.yml
      
      - name: Validate MkDocs configuration
        run: |
          echo "Validating mkdocs.yml syntax..."
          python3 -c "import yaml; yaml.safe_load(open('mkdocs.yml'))" && echo "✓ YAML syntax is valid" || echo "✗ YAML syntax error!"
      
      - name: Test build with detailed output
        run: |
          echo "========================================="
          echo "Building MkDocs site with verbose output"
          echo "========================================="
          mkdocs build --verbose 2>&1 | tee build.log || {
            EXIT_CODE=$?
            echo ""
            echo "========================================="
            echo "BUILD FAILED with exit code: $EXIT_CODE"
            echo "========================================="
            echo ""
            echo "Last 50 lines of error output:"
            tail -50 build.log
            echo ""
            echo "Checking for common issues..."
            echo ""
            
            # Check for missing dependencies
            if grep -q "No module named" build.log; then
              echo "❌ Missing Python module detected"
              echo "Trying to identify missing module..."
              grep "No module named" build.log
            fi
            
            # Check for file not found errors
            if grep -q "does not exist" build.log; then
              echo "❌ File not found error detected"
              grep "does not exist" build.log
            fi
            
            # Check for plugin errors
            if grep -q "plugin" build.log; then
              echo "❌ Plugin-related error detected"
              grep -A2 -B2 "plugin" build.log
            fi
            
            # Check for theme errors
            if grep -q "theme" build.log; then
              echo "❌ Theme-related error detected"
              grep -A2 -B2 "theme" build.log
            fi
            
            exit $EXIT_CODE
          }
      
      - name: If build succeeds, deploy
        if: success()
        run: |
          echo "Build successful! Deploying to GitHub Pages..."
          mkdocs gh-deploy --force --verbose